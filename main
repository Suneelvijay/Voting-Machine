#include<xc.h>                 
int flag = 0;
void delay_ms(int ms);
void delay_us(int us);
void Data(int Value);           /*  LCD Data Function Declaration                        */
void Cmd(int Value);            /*  LCD Command Function Declaration                     */
void Send2Lcd(const char Adr, const char *Lcd);
void Eeprom_Write(char,char);
char Eeprom_Read(char);


void __interrupt() adcint()
{
	 GIE   = 0;
	if (ADIF == 1)
    {
        flag=1;
        ADIF=0;        
    }
	GIE   = 1;
}
//function to write to EEPROM by char
void ch(char addr,unsigned int n)   
{
    if(n==0)
        Eeprom_Write(addr,'0');
    else if(n==1)
        Eeprom_Write(addr,'1');
    else if(n==2)
        Eeprom_Write(addr,'2');
    else if(n==3)
        Eeprom_Write(addr,'3');
    else if(n==4)
        Eeprom_Write(addr,'4');
    else if(n==5)
        Eeprom_Write(addr,'5');
    else if(n==6)
        Eeprom_Write(addr,'6');
    else if(n==7)
        Eeprom_Write(addr,'7');
    else if(n==8)
        Eeprom_Write(addr,'8');
    else if(n==9)
        Eeprom_Write(addr,'9');
}
//function to make led blink
void win()                  
{
    unsigned int i;
    TRISB = 0X00;
    PORTB = 0XFF;
    for(i=0;i<5000;i++);
    PORTB = 0X00;
    for(i=0;i<5000;i++);
}
//function to display winner in LCD screen
void res(unsigned int n1,unsigned int n2,unsigned int n3,unsigned int n4)    
{
    Cmd(0x01);
    if (n1>n2 &&  n1>n3 && n1>n4)
    {
        Send2Lcd(0x80,"Winner: C1");
        delay_ms(500);
    }
    else if (n2>n1 &&  n2>n3 && n2>n4)
    {
        Send2Lcd(0x80,"Winner: C2");
        delay_ms(500);
    }
    else if (n3>n2 &&  n3>n1 && n3>n4)
    {
        Send2Lcd(0x80,"Winner: C3");
        delay_ms(500);
    }
    else if (n4>n2 &&  n4>n1 && n4>n3)
    {
        Send2Lcd(0x80,"Winner: C4");
        delay_ms(500);
    }
    else
    {
        Send2Lcd(0x80,"DRAW");
    }
    delay_ms(1000000);
}
//initialize lcd display
void lcd()
{
    TRISC=0X00;                /*  (RC1,RC0 ->O/P Setting by Zero)                      */
    TRISD=0X00;                /*  PORTD (0 - 7)pins Config as Output                   */
    TRISB=0x00;
    PORTB=0x00;
    PORTC=0x00;
    delay_ms(15);              /*  Minimum Delay To Power On LCD Module To Recieve Mode */
     Cmd(0X30);	delay_ms(5);    /*  LCD Specification Commands                           */
     Cmd(0X30);	delay_ms(1);    /*  LCD Specification Commands                           */
     Cmd(0X30);	delay_ms(2);    /*  LCD Specification Commands                           */
     Cmd(0X38);                 /*  LCD Double Line Display Command                      */
     Cmd(0X06);                 /*  LCD Auto Increment Location Address Command          */
     Cmd(0X01);                 /*  LCD Display Clear Command                            */
     Cmd(0X0C);                 /*  LCD Display ON Command                               */
}
//intro in lcd
void dspstr()
{
     Send2Lcd(0x84,"WELCOME!");	/*  LCD Data Outing Function                     */
     delay_ms(3);
     delay_ms(1000);
     Send2Lcd(0x80,"PRESS BUTTON TO ");	/*  LCD Data Outing Function                     */
     Send2Lcd(0xC0,"VOTE or RESULT");
     delay_ms(3);
     delay_ms(1000);
     Cmd(0x01);
     Send2Lcd(0x85,"MENU");
     delay_ms(1000);
     Cmd(0x01);
     Send2Lcd(0x80,"5 - VOTING MODE");
     Send2Lcd(0xC0,"6 - RESULTS");
}
//display results in lcd
void display(unsigned int d1, unsigned int d2,unsigned int d3, unsigned int d4)
{
    unsigned int n1a,n1b,n2a,n2b,n3a,n3b,n4a,n4b;
    Cmd(0x01); 
    Send2Lcd(0x80,"C1");	/*  LCD Data Outing Function                     */
     delay_ms(3);
     Send2Lcd(0x84,"C2");	/*  LCD Data Outing Function                     */
     delay_ms(3);
     Send2Lcd(0x88,"C3");	/*  LCD Data Outing Function                     */
     delay_ms(3);
     Send2Lcd(0x8c,"C4");	/*  LCD Data Outing Function                     */
     delay_ms(3);
     Cmd(0xC0);
     n1a = d1/10;
     n1b = d1%10;
     Data(n1a+'0');
     Data(n1b+'0');
     Cmd(0xC4);
     n2a = d2/10;
     n2b = d2%10;
     Data(n2a+'0');
     Data(n2b+'0');
     Cmd(0xC8);
     n3a = d3/10;
     n3b = d3%10;
     Data(n3a+'0');
     Data(n3b+'0');
     Cmd(0xCC);
     n4a = d4/10;
     n4b = d4%10;
     Data(n4a+'0');
     Data(n4b+'0');
     delay_ms(1000);
     TRISC	=	0XC0;				/* PORTC Is used For Transmission               	*/
	 SPBRG	=	129;				/* Serial Port Baud rate Generator (9600)       	*/
	 TXSTA	=	0X24;				/* Transmission Enabling (TXEN=1,SYNC=0,BRGH=1) 	*/  
	 RCSTA	=	0X90;				/* Transmission Enabling (SPEN=1)               	*/
     ch(50,n1a);
     ch(51,n1b);
     ch(52,n2a);
     ch(53,n2b);
     ch(54,n3a);
     ch(55,n3b);
     ch(56,n4a);
     ch(57,n4b);
     delay_ms(2000);
}
//initialize keypad
void ky()
{
    TRISA=0x01;
    PORTA=0X00;
    TRISB=0X1F;
    TRISE = 0x00;
    nRBPU=0;
}
//keypad configuration for voting
void key(unsigned int n1,unsigned int n2,unsigned int n3,unsigned int n4)
{
    unsigned int i,n1a,n1b,n2a,n2b,n3a,n3b,n4a,n4b;
    while(1)
    {
        RB7=1;
        RB6=1;
        RB5=0;
        PORTE = 0X00;
        if(RB1==0)
        {
            while(RB1==0)
            {
                PORTE = 0XFF;
                for(i=0;i<50000;i++);
                PORTE = 0x00;
                n1++;
                Cmd(0x01);
                Send2Lcd(0x80,"Confirming...");
                delay_ms(2000);
                Cmd(0x01);
                Send2Lcd(0x80,"VOTED FOR C1");
                delay_ms(1000);
                Cmd(0x01);
                Send2Lcd(0x80,"1 - C1    2 - C2");
                Send2Lcd(0xC0,"3 - C3    4 - C4");
            }
        }
        if(RB2==0)
        {
            while(RB2==0)
            {
                PORTE = 0XFF;
                for(i=0;i<50000;i++);
                PORTE = 0x00;
                n2++;
                Cmd(0x01);
                Send2Lcd(0x80,"Confirming...");
                delay_ms(2000);
                Cmd(0x01);
                Send2Lcd(0x80,"VOTED FOR C2");
                delay_ms(1000);
                Cmd(0x01);
                Send2Lcd(0x80,"1 - C1    2 - C2");
                Send2Lcd(0xC0,"3 - C3    4 - C4");
            }
        }
        if(RB3==0)
        {
            while(RB3==0)
            {
                PORTE = 0XFF;
                for(i=0;i<50000;i++);
                PORTE = 0x00;
                n3++;
                Cmd(0x01);
                Send2Lcd(0x80,"Confirming...");
                delay_ms(2000);
                Cmd(0x01);
                Send2Lcd(0x80,"VOTED FOR C3");
                delay_ms(1000);
                Cmd(0x01);
                Send2Lcd(0x80,"1 - C1    2 - C2");
                Send2Lcd(0xC0,"3 - C3    4 - C4");
            }
        }
        if(RB4==0)
        {
            while(RB4==0)
            {
                PORTE = 0XFF;
                for(i=0;i<50000;i++);
                PORTE = 0x00;
                n4++;
                Cmd(0x01);
                Send2Lcd(0x80,"Confirming...");
                delay_ms(2000);
                Cmd(0x01);
                Send2Lcd(0x80,"VOTED FOR C4");
                delay_ms(1000);
                Cmd(0x01);
                Send2Lcd(0x80,"1 - C1    2 - C2");
                Send2Lcd(0xC0,"3 - C3    4 - C4");
            }
        }
        RB7=1;
        RB6=0;
        RB5=1;
        PORTE = 0X00;
        if(RB1==0)
        {
            while(RB1==0)
            {
                Cmd(0x01);
                Send2Lcd(0x80,"VOTING MODE...");
                delay_ms(1000);
                Cmd(0x01);
                Send2Lcd(0x83,"CANDIDATES");
                Send2Lcd(0xC6,"MENU");
                delay_ms(1000);
                Cmd(0x01);
                Send2Lcd(0x80,"1 - C1    2 - C2");
                Send2Lcd(0xC0,"3 - C3    4 - C4");
                delay_ms(1000);
                
            }
        }
        if(RB2==0)
        {
            while(RB2==0)
            {
                Cmd(0x01);
                Send2Lcd(0x80,"RESULTS!");
                delay_ms(1000);
                Cmd(0x01);
                display(n1,n2,n3,n4);
                res(n1,n2,n3,n4);
            }
            delay_ms(100000);
        }
    }
}
void main()                    
{
     unsigned int n1=0,n2=0,n3=0,n4=0;
     lcd();
     dspstr();
     ky();
     key(n1,n2,n3,n4);
     
}
/*
*******************************************************************************************
* 	Function    : Cmd
* 	Description : Function to send a command to LCD
* 	Parameters  : Value, contains the command to be send
*******************************************************************************************
*/
void Cmd(int Value)
{
     PORTD=Value;
     RC1=0;                     /*  RC1=0(RS=0)		[Command Registr Selection])    */
     RC0=0;                     /*  RC0=0(R/W=0)	[Write Process])                */
     RC2=1;                     /*  RC2=1(Enable=1)	[Enable Line ON]                */
     delay_ms(4);               /*  Minimun Delay For Hold On Data                  */
     RC2=0;                     /*  RC2=0(Enable=0)	[Enable Line OFF]               */
}	
/*
*************************************************************************************
* 	Function    : Data
* 	Description : Function to send a data to LCD
* 	Parameters  : Value, contains the data to be send
*************************************************************************************
*/ 
void Data(int Value)
{
     PORTD=Value;
     RC1=1;                     /*  RC1=1(RS=1)		[Data Registr Selection])       */
     RC0=0;                     /*  RC0=0(R/W=0)	[Write Process])                */
     RC2=1;                     /*  RC2=1(Enable=1)	[Enable Line ON]                */
     delay_ms(4);               /*  Minimun Delay For Hold On Data                  */
     RC2=0;                     /*  RC2=0(Enable=0)	[Enable Line OFF]               */
}
/*
*************************************************************************************
* 	Function    : Send2Lcd
* 	Description : Function to send a string of data in to LCD
* 	Parameters  : adr, contains the adddress of a string 
*************************************************************************************
*/
void Send2Lcd(const char Adr, const char *Lcd)
{
     Cmd(Adr);
     while(*Lcd!='\0')	{	Data(*Lcd);		Lcd++;	}
     
}
/*
*************************************************************************************
* 	Function    : delay_ms
* 	Description : Function for delay
* 	Parameters  : ms, contains millesec
*************************************************************************************
*/
void delay_ms(int ms)
{
	int i,count;
	
	for(i=1;i<=ms;i++)
	{
		count=1000;
		while(count!=1)
		{
			count--;
		}
	}
}
void Eeprom_Write(char addr,char data)
{
	EEPGD=0;         			/* Program/Data EEPROM select bit               	*/
	EEADR=addr;       			/* EEPROM address register, low byte            	*/
	EEDATA=data;      			/* EEPROM data register, low byte               	*/
	WREN=1;						/* EEPROM write enable bit                      	*/
	GIE=0;						/* Global interrupt enable bit                  	*/
	EECON2=0X55;				/* EEPROM control register2                     	*/
	EECON2=0XAA;
	WR=1;           			/* Write control bit                            	*/
	while(WR==1);
	GIE=1;     
	WREN=0;
}
char Eeprom_Read(char addr)
{
	char data=0;
	EEADR=addr;
	EEPGD=0;
	RD=1;                
	while(RD==1);       
	data=EEDATA;
	return data;   
}