#include<xc.h>                 
#include<pic.h>                     /* Header file inclusion                         	*/
int flag = 0;
void Eeprom_Write(char,char);
char Eeprom_Read(char);
void delay_ms(int ms);
void delay_us(int us);
void Data(int Value);           /*  LCD Data Function Declaration                        */
void Cmd(int Value);            /*  LCD Command Function Declaration                     */
void Send2Lcd(const char Adr, const char *Lcd);


void __interrupt() adcint()
{
	 GIE   = 0;
	if (ADIF == 1)
    {
        flag=1;
        ADIF=0;        
    }
	GIE   = 1;
}
//function to write to EEPROM by char
void ch(char addr,unsigned int n)
{
    if(n==0)
        Eeprom_Write(addr,'0');
    else if(n==1)
        Eeprom_Write(addr,'1');
    else if(n==2)
        Eeprom_Write(addr,'2');
    else if(n==3)
        Eeprom_Write(addr,'3');
    else if(n==4)
        Eeprom_Write(addr,'4');
    else if(n==5)
        Eeprom_Write(addr,'5');
    else if(n==6)
        Eeprom_Write(addr,'6');
    else if(n==7)
        Eeprom_Write(addr,'7');
    else if(n==8)
        Eeprom_Write(addr,'8');
    else if(n==9)
        Eeprom_Write(addr,'9');
}
//lcd initialization
void lcd()
{
    TRISC=0X00;                /*  (RC1,RC0 ->O/P Setting by Zero)                      */
    TRISD=0X00;                /*  PORTD (0 - 7)pins Config as Output                   */
    TRISB=0x00;
    PORTB=0x00;
    PORTC=0x00;
    delay_ms(15);              /*  Minimum Delay To Power On LCD Module To Recieve Mode */
     Cmd(0X30);	delay_ms(5);    /*  LCD Specification Commands                           */
     Cmd(0X30);	delay_ms(1);    /*  LCD Specification Commands                           */
     Cmd(0X30);	delay_ms(2);    /*  LCD Specification Commands                           */
     Cmd(0X38);                 /*  LCD Double Line Display Command                      */
     Cmd(0X06);                 /*  LCD Auto Increment Location Address Command          */
     Cmd(0X01);                 /*  LCD Display Clear Command                            */
     Cmd(0X0C);                 /*  LCD Display ON Command                               */
}
/*
*******************************************************************************************
* 	Function    : Cmd
* 	Description : Function to send a command to LCD
* 	Parameters  : Value, contains the command to be send
*******************************************************************************************
*/
void Cmd(int Value)
{
     PORTD=Value;
     RC1=0;                     /*  RC1=0(RS=0)		[Command Registr Selection])    */
     RC0=0;                     /*  RC0=0(R/W=0)	[Write Process])                */
     RC2=1;                     /*  RC2=1(Enable=1)	[Enable Line ON]                */
     delay_ms(4);               /*  Minimun Delay For Hold On Data                  */
     RC2=0;                     /*  RC2=0(Enable=0)	[Enable Line OFF]               */
}	
/*
*************************************************************************************
* 	Function    : Data
* 	Description : Function to send a data to LCD
* 	Parameters  : Value, contains the data to be send
*************************************************************************************
*/ 
//display only integer(1 digit)
void Data(int Value)
{
     PORTD=Value;
     RC1=1;                     /*  RC1=1(RS=1)		[Data Registr Selection])       */
     RC0=0;                     /*  RC0=0(R/W=0)	[Write Process])                */
     RC2=1;                     /*  RC2=1(Enable=1)	[Enable Line ON]                */
     delay_ms(4);               /*  Minimun Delay For Hold On Data                  */
     RC2=0;                     /*  RC2=0(Enable=0)	[Enable Line OFF]               */
}
/*
*************************************************************************************
* 	Function    : Send2Lcd
* 	Description : Function to send a string of data in to LCD
* 	Parameters  : adr, contains the adddress of a string 
*************************************************************************************
*/
//Display strings in LCD
void Send2Lcd(const char Adr, const char *Lcd)
{
     Cmd(Adr);
     while(*Lcd!='\0')	{	Data(*Lcd);		Lcd++;	}
     
}
/*
*************************************************************************************
* 	Function    : delay_ms
* 	Description : Function for delay
* 	Parameters  : ms, contains millesec
*************************************************************************************
*/
void delay_ms(int ms)
{
	int i,count;
	
	for(i=1;i<=ms;i++)
	{
		count=1000;
		while(count!=1)
		{
			count--;
		}
	}
}
void main()
{
	unsigned char c1,c2,c3,c4,c5,c6,c7,c8;
    unsigned int n1a=0,n1b=5,n2a=0,n2b=4,n3a=0,n3b=3,n4a=0,n4b=2;
    lcd();
    Send2Lcd(0x80,"EEPROM DATA");
    delay_ms(1000);
	
	TRISC	=	0XC0;				/* PORTC Is used For Transmission               	*/
	SPBRG	=	129;				/* Serial Port Baud rate Generator (9600)       	*/
	TXSTA	=	0X24;				/* Transmission Enabling (TXEN=1,SYNC=0,BRGH=1) 	*/  
	RCSTA	=	0X90;				/* Transmission Enabling (SPEN=1)               	*/
    
	c1= Eeprom_Read(50);
    c2 = Eeprom_Read(51);
    c3 = Eeprom_Read(52);
    c4 = Eeprom_Read(53);
    c5 = Eeprom_Read(54);
    c6 = Eeprom_Read(55);
    c7 = Eeprom_Read(56);
    c8 = Eeprom_Read(57);
    Cmd(0x01);                  //clear screen
    Send2Lcd(0x80,"C1");        //1st row 1st column of 16x2 LCD screen
    Send2Lcd(0x84,"C2");        //1st row 5th column of 16x2 LCD screen
    Send2Lcd(0x88,"C3");        //1st row 9th column of 16x2 LCD screen
    Send2Lcd(0x8c,"C4");        //1st row 13th column of 16x2 LCD screen
    Cmd(0xC0);                  //2nd row 1st column of 16x2 LCD screen
    Data(c1);                   
    Data(c2);
    Send2Lcd(0xC2,"  ");
    Data(c3);
    Data(c4);
    Send2Lcd(0xC6,"  ");
    Data(c5);
    Data(c6);
    Send2Lcd(0xCa,"  ");
    Data(c7);
    Data(c8);
    
	TXREG=c1;
	while(TRMT==0);
	while(1);
	
}
// function to write a data in given location in eeprom
void Eeprom_Write(char addr,char data)
{
	EEPGD=0;         			/* Program/Data EEPROM select bit               	*/
	EEADR=addr;       			/* EEPROM address register, low byte            	*/
	EEDATA=data;      			/* EEPROM data register, low byte               	*/
	WREN=1;						/* EEPROM write enable bit                      	*/
	GIE=0;						/* Global interrupt enable bit                  	*/
	EECON2=0X55;				/* EEPROM control register2                     	*/
	EECON2=0XAA;
	WR=1;           			/* Write control bit                            	*/
	while(WR==1);
	GIE=1;     
	WREN=0;
}
// function to read a location in eeprom
char Eeprom_Read(char addr)
{
	char data=0;
	EEADR=addr;
	EEPGD=0;
	RD=1;                
	while(RD==1);       
	data=EEDATA;
	return data; 
}
